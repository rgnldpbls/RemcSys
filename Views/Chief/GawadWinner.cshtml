@{
    Layout = "_NavChief1";
    ViewData["Title"] = "Gawad Winner Upload";
    var currentPage = ViewBag.CurrentPage as string;
}

<h2> GAWAD </h2>

<!-- Buttons here-->
<div class="button-container">
    <a href="/Chief/TuklasNominee" class="gawad-button @(currentPage == "tuklas" ? "active" : "")" >Gawad Tuklas</a>
    <a href="/Chief/LathalaNominee" class="gawad-button @(currentPage == "lathala" ? "active" : "")" >Gawad Lathala</a>
    <a href="/Chief/GawadWinner" class="gawad-button @(currentPage == "generate" ? "active" : "")" >Generate Gawad Winners</a>
</div>

<hr />


<div class="upload-container">
    <h5>Upload Gawad Winners Attachment</h5>
    <p><em>Note: PDF or Excel only</em></p>
    <hr />

    <div id="drop-area">
        <p>Drag & Drop your file here</p>
        <input type="file" id="fileInput" accept=".pdf,.docx">
    </div>

    <div class="button-group">
        <button id="previewButton" class="file-action-button">Preview File</button>
        <button id="uploadButton" class="file-action-button">Submit File</button>
    </div>
</div>

<!-- Archive section -->
<h2 class="archive-title">Archive:</h2>
<div class="archive-container">
    <table id="archiveTable">
        <thead>
            <tr>
                <th>Name</th>
                <th>Download</th>
            </tr>
        </thead>
        <tbody>
            <!-- Archive entries will be added here -->
        </tbody>
    </table>
</div>

@section Scripts {
    <script>
        // Drag and Drop functionality
        const dropArea = document.getElementById('drop-area');
        const fileInput = document.getElementById('fileInput');

        // Prevent default drag behaviors
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false)
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        // Highlight drop area when dragging files
        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, () => dropArea.classList.add('highlight'), false)
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, () => dropArea.classList.remove('highlight'), false)
        });

        dropArea.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;

            // Validate file type
            if (validateFile(files[0])) {
                fileInput.files = files;
            } else {
                alert('Invalid file type. Only PDF and Excel files are allowed.');
            }
        }

        // File validation for file type
        function validateFile(file) {
            const validTypes = ['application/pdf', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
            return validTypes.includes(file.type);
        }

        // File Preview
        document.getElementById('previewButton').addEventListener('click', () => {
            const file = fileInput.files[0];

            if (!file) {
                alert('No file selected.');
                return;
            }

            if (!validateFile(file)) {
                alert('Invalid file type. Only PDF and Excel files are allowed.');
                return;
            }

            const url = URL.createObjectURL(file);
            window.open(url, '_blank');
        });

        // File Upload
        document.getElementById('uploadButton').addEventListener('click', async () => {
            const file = fileInput.files[0];

            if (!file) {
                alert('Please select a file.');
                return;
            }

            if (!validateFile(file)) {
                alert('Invalid file type. Only PDF and Excel files are allowed.');
                return;
            }

            if (!confirm('Are you sure you want to submit this file? This cannot be undone.')) {
                return;
            }

            const formData = new FormData();
            formData.append('file', file);

            const response = await fetch('/uploadfile', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                alert('File uploaded successfully');
                updateArchive();
            } else {
                alert('Failed to upload file');
            }
        });

        // Fetch and update archive table
        async function updateArchive() {
            const response = await fetch('/getarchive');
            const archive = await response.json();

            const tableBody = document.getElementById('archiveTable').querySelector('tbody');
            tableBody.innerHTML = '';

            archive.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                            <td>${item.name}</td>
                            <td><a href="${item.url}" download>Download as PDF</a></td>
                        `;
                tableBody.appendChild(row);
            });
        }

        // Initial load of archive
        updateArchive();

        // Confirm page navigation
        function confirmPageChange(event) {
            if (!confirm('Are you sure you want to change pages? You will lose any progress you have made.')) {
                event.preventDefault();
            }
        }
    </script>
}
