@model Settings
@{
    ViewData["Title"] = "Settings";
    Layout = "_NavChief1";
}

<h2>Settings</h2>

<p>Here you can configure your application settings.</p>
@Html.AntiForgeryToken()

<h5>Maintenance Mode</h5>
<div class="form-group">
    <label class="switch">
        <input type="checkbox" id="maintenanceSwitch" asp-for="isMaintenance" onchange="updateSwitchStatus(this)">
        <span class="slider" id="slider">
            <span class="slider-text" id="status"></span>
        </span>
    </label>
</div>

<script>
    function updateSwitchStatus(element) {
        var statusText = document.getElementById("status");
        if (element.checked) {
            statusText.textContent = "ON";
            statusText.style.color = "#fff";
            element.parentElement.querySelector(".slider").style.backgroundColor = "#4CAF50"; // Green
        } else {
            statusText.textContent = "OFF";
            statusText.style.color = "#fff";
            element.parentElement.querySelector(".slider").style.backgroundColor = "#f44336"; // Red
        }
    }
</script>

<script>
    const maintenanceSwitch = document.getElementById('maintenanceSwitch');
    const status = document.getElementById('status');
    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
    const slider = document.getElementById('slider');

    maintenanceSwitch.addEventListener('change', async function (event) {
        event.preventDefault();

        const newState = this.checked;
        const message = newState ?
            'Are you sure you want to put in Maintenance Mode the system?' :
            'Are you sure you want to turn off the Maintenance Mode in the system?';

        if (confirm(message)) {
            $.ajax({
                url: '@Url.Action("UpdateMaintenanceMode", "Chief")',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                data: {
                    isMaintenanceMode: newState
                },
                success: function (response) {
                    this.checked = newState
                    status.textContent = newState ? 'ON' : 'OFF';
                },
                error: function (xhr, status, error) {
                    alert('Error updating status. Please try again.');
                }
            });
        };
    });

    window.addEventListener('load', function () {
        const initialState = @Json.Serialize(Model.isMaintenance);
        maintenanceSwitch.checked = initialState;
        status.textContent = initialState ? 'ON' : 'OFF';
        status.style.color = initialState ? '#fff' : '#fff';
        slider.style.backgroundColor = initialState ? '#4CAF50' : '#f44336';
    });
</script>


<style>
    .switch {
        position: relative;
        display: inline-block;
        width: 120px;
        height: 34px;
    }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 34px;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

    .slider-text {
        position: absolute;
        font-size: 14px;
        font-weight: bold;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        transition: .4s;
    }

    input:checked + .slider:before {
        transform: translateX(86px);
    }
</style>