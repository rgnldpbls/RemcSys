@model Tuple<Settings, List<Guidelines>, List<Criteria>, List<SubCategory>>
@{
    ViewData["Title"] = "Settings";
    Layout = "_NavChief1";
}

<h1 style="color: #850000; margin-top: 10px;">SETTINGS</h1>
<hr />
@Html.AntiForgeryToken()

<div class="form-group d-flex align-items-center">
    <label class="mx-3"><b>UNDER MAINTENANCE</b></label>
    <label for="maintenanceSwitch" class="switch">
        <input type="checkbox" id="maintenanceSwitch" onchange="updateSwitchStatus(this, 'maintenance')">
        <span class="slider" id="maintenance-slider">
            <span class="slider-text" id="maintenance-status"></span>
        </span>
    </label>
    <label class="mx-3"><b>UFR APPLICATION</b></label>
    <label for="ufrAppSwitch" class="switch">
        <input type="checkbox" id="ufrAppSwitch" onchange="updateSwitchStatus(this, 'ufrApp')">
        <span class="slider" id="ufrApp-slider">
            <span class="slider-text" id="ufrApp-status"></span>
        </span>
    </label>
    <label class="mx-3"><b>EFR APPLICATION</b></label>
    <label for="efrAppSwitch" class="switch">
        <input type="checkbox" id="efrAppSwitch" onchange="updateSwitchStatus(this, 'efrApp')">
        <span class="slider" id="efrApp-slider">
            <span class="slider-text" id="efrApp-status"></span>
        </span>
    </label>
    <label class="mx-3"><b>UFRL APPLICATION</b></label>
    <label for="ufrlAppSwitch" class="switch">
        <input type="checkbox" id="ufrlAppSwitch" onchange="updateSwitchStatus(this, 'ufrlApp')">
        <span class="slider" id="ufrlApp-slider">
            <span class="slider-text" id="ufrlApp-status"></span>
        </span>
    </label>
</div>
<hr />
<div class="form-group d-flex align-items-center mt-4">
    <label class="mx-3"><b>NUMBER OF EVALUATORS</b></label>
    <div class="input-group" style="width: 200px;">
        <input type="number"
                id="evaluatorCount"
                class="form-control"
                min="1"
                max="10"
                value="@Model.Item1.evaluatorNum"
                style="border-radius: 4px;"/>
        <button class="btn btn-primary ms-2"
                onclick="updateEvaluatorCount()"
                style="border-radius: 4px;">
            Save
        </button>
    </div>
    <label class="mx-3"><b>NUMBER OF EVALUATION DAYS</b></label>
    <div class="input-group" style="width: 200px;">
        <input type="number"
               id="evaluationDays"
               class="form-control"
               min="1"
               max="30"
               value="@Model.Item1.daysEvaluation"
               style="border-radius: 4px;" />
        <button class="btn btn-primary ms-2"
                onclick="updateDaysEvaluation()"
                style="border-radius: 4px;">
            Save
        </button>
    </div>
</div>
<hr />
<div class="d-flex justify-content-between align-items-start mt-4" style="gap: 10px;">
    <div class="flex-fill">
        <label class="mx-3"><b>MANAGED MEMORANDUMS</b></label>
        <div id="uploadFiles" class="mt-2">
            @if (Model.Item2 != null && Model.Item2.Any())
            {
                <ul>
                    @foreach (var file in Model.Item2)
                    {
                        if (file.document_Type == "Memorandum")
                        {
                            <li>
                                @file.file_Name
                                <a href="@Url.Action("PreviewFile", new {id = file.Id})" target="_blank" style="color: #850000; text-decoration: none;">[Preview]</a>
                                <a href="@Url.Action("RemoveFile", new {id = file.Id})" style="color: #850000; text-decoration: none;"
                                   onclick="return confirm('Are you sure you want to remove this file?');">[Remove]</a>
                            </li>
                        }
                    }
                </ul>
            }
            else
            {
                <p>No file have been uploaded yet.</p>
            }
        </div>
        <div class="input-group mt-3" style="width: 400px;">
            <input type="file" id="memorandumFile" class="form-control" accept=".pdf" />
            <button class="btn btn-info ms-2"
                    onclick="previewFile('memorandumFile')"
                    style="border-radius: 4px;">
                Preview
            </button>
            <button class="btn btn-primary ms-2"
                    onclick="submitFile('memorandumFile', 'Memorandum')"
                    style="border-radius: 4px;">
                Submit
            </button>
        </div>
    </div>
    <div class="flex-fill">
        <label class="mx-3"><b>GENERATED DOCUMENTARY FORMS</b></label>
        <div class="mt-2">
            @if (Model.Item2 != null && Model.Item2.Any())
            {
                <ul>
                    @foreach (var file in Model.Item2)
                    {
                        if (file.document_Type == "DocumentaryForm")
                        {
                            <li>
                                @file.file_Name
                                <a href="@Url.Action("PreviewFile", new {id = file.Id})" style="color: #850000; text-decoration: none;">[Preview]</a>
                                <a href="@Url.Action("RemoveFile", new {id = file.Id})" style="color: #850000; text-decoration: none;"
                                   onclick="return confirm('Are you sure you want to remove this file?');">[Remove]</a>
                            </li>
                        }
                    }
                </ul>
            }
            else
            {
                <p>No file have been uploaded yet.</p>
            }
        </div>
        <div class="input-group mt-3" style="width: 400px;">
            <input type="file" id="docuFile" class="form-control" accept=".docx, .pdf" />
            <button class="btn btn-info ms-2"
                    onclick="previewFile('docuFile')"
                    style="border-radius: 4px;">
                Preview
            </button>
            <button class="btn btn-primary ms-2"
                    onclick="submitFile('docuFile', 'DocumentaryForm')"
                    style="border-radius: 4px;">
                Submit
            </button>
        </div>
    </div>
    <div class="flex-fill">
        <label class="mx-3"><b>MANAGED UFR EVALUATION FORMS</b></label>
        <div id="uploadFilesUFR" class="mt-2">
            @if (Model.Item2 != null && Model.Item2.Any())
            {
                <ul>
                    @foreach(var file in Model.Item2)
                    {
                        if(file.document_Type == "UFREvalsForm")
                        {
                            <li>
                                @file.file_Name
                                <a href="@Url.Action("PreviewFile", new {id = file.Id})" target="_blank" style="color: #850000; text-decoration: none;">[Preview]</a>
                                <a href="@Url.Action("RemoveFile", new {id = file.Id})" style="color: #850000; text-decoration: none;"
                                   onclick="return confirm('Are you sure you want to remove this file?');">[Remove]</a>
                            </li>
                        }
                    }
                </ul>
            }
            else
            {
                <p>No file have been uploaded yet.</p>
            }
        </div>
        <div class="input-group mt-3" style="width: 400px;">
            <input type="file" id="ufrEvaluationFile" class="form-control" accept=".docx, .pdf"/>
            <button class="btn btn-info ms-2"
                    onclick="previewFile('ufrEvaluationFile')"
                    style="border-radius: 4px;">Preview</button>
            <button class="btn btn-primary ms-2"
                    onclick="submitFile('ufrEvaluationFile', 'UFREvalsForm')"
                    style="border-radius: 4px;">Submit</button>
        </div>
    </div>
</div>
<hr />
<div class="d-flex justify-content-between align-items-start mt-4" style="gap: 10px;">
    <div class="flex-fill">
        <label class="mx-3"><b>GENERATED PROGRESS REPORT</b></label>
        <div class="mt-2">
            @if (Model.Item2 != null && Model.Item2.Any())
            {
                <ul>
                    @foreach (var file in Model.Item2)
                    {
                        if (file.document_Type == "ProgressReport")
                        {
                            <li>
                                @file.file_Name
                                <a href="@Url.Action("PreviewFile", new {id = file.Id})" target="_blank" style="color: #850000; text-decoration: none;">[Preview]</a>
                                <a href="@Url.Action("RemoveFile", new {id = file.Id})" style="color: #850000; text-decoration: none;"
                                   onclick="return confirm('Are you sure you want to remove this file?');">[Remove]</a>
                            </li>
                        }
                    }
                </ul>
            }
            else
            {
                <p>No file have been uploaded yet.</p>
            }
        </div>
        <div class="input-group mt-3" style="width: 400px;">
            <input type="file" id="progressReport" class="form-control" accept=".docx, .pdf" />
            <button class="btn btn-info ms-2"
                    onclick="previewFile('progressReport')"
                    style="border-radius: 4px;">Preview</button>
            <button class="btn btn-primary ms-2"
                    onclick="submitFile('progressReport', 'ProgressReport')"
                    style="border-radius: 4px;">Submit</button>
        </div>
    </div>
    <div class="flex-fill">
        <label class="mx-3"><b>GENERATED TERMINAL REPORT</b></label>
        <div class="mt-2">
            @if (Model.Item2 != null && Model.Item2.Any())
            {
                <ul>
                    @foreach (var file in Model.Item2)
                    {
                        if (file.document_Type == "TerminalReport")
                        {
                            <li>
                                @file.file_Name
                                <a href="@Url.Action("PreviewFile", new {id = file.Id})" target="_blank" style="color: #850000; text-decoration: none;">[Preview]</a>
                                <a href="@Url.Action("RemoveFile", new {id = file.Id})" style="color: #850000; text-decoration: none;"
                                   onclick="return confirm('Are you sure you want to remove this file?');">[Remove]</a>
                            </li>
                        }
                    }
                </ul>
            }
            else
            {
                <p>No file have been uploaded yet.</p>
            }
        </div>
        <div class="input-group mt-3" style="width: 400px;">
            <input type="file" id="terminalReport" class="form-control" accept=".docx, .pdf" />
            <button class="btn btn-info ms-2"
                    onclick="previewFile('terminalReport')"
                    style="border-radius: 4px;">Preview</button>
            <button class="btn btn-primary ms-2"
                    onclick="submitFile('terminalReport', 'TerminalReport')"
                    style="border-radius: 4px;">Submit</button>
        </div>
    </div>
    <div class="flex-fill">
        <label class="mx-3"><b>GENERATED CERTIFICATE OF COMPLETION (1 file)</b></label>
        <div class="mt-2">
            @if (Model.Item2 != null && Model.Item2.Any())
            {
                <ul>
                    @foreach (var file in Model.Item2)
                    {
                        if (file.document_Type == "CertificateCompletion")
                        {
                            <li>
                                @file.file_Name
                                <a href="@Url.Action("PreviewFile", new {id = file.Id})" target="_blank" style="color: #850000; text-decoration: none;">[Preview]</a>
                                <a href="@Url.Action("RemoveFile", new {id = file.Id})" style="color: #850000; text-decoration: none;"
                                   onclick="return confirm('Are you sure you want to remove this file?');">[Remove]</a>
                            </li>
                        }
                    }
                </ul>
            }
            else
            {
                <p>No file have been uploaded yet.</p>
            }
        </div>
        <div class="input-group mt-3" style="width: 400px;">
            <input type="file" id="certificateCompletion" class="form-control" accept=".docx, .pdf" />
            <button class="btn btn-info ms-2"
                    onclick="previewFile('certificateCompletion')"
                    style="border-radius: 4px;">Preview</button>
            <button class="btn btn-primary ms-2"
                    onclick="submitFile('certificateCompletion', 'CertificateCompletion')"
                    style="border-radius: 4px;">Submit</button>
        </div>
    </div>
</div>
<hr />
<div class="d-flex justify-content-between align-items-start mt-4">
    <div class="flex-fill">
        <h4><b>MANAGE EVALUATION CRITERIA</b></h4>
        <label class="mx-3"><b>ADD NEW CRITERIA</b></label>
        <form method="post" action="@Url.Action("AddCriteria", "Chief")">
            <div class="form-group" style="width: 500px;">
                <label for="criteriaName">Criteria Name</label>
                <input type="text" class="form-control" id="criteriaName" name="criteriaName" required style="border-radius: 4px;" />
            </div>
            <div class="form-group" style="width: 500px;">
                <label for="criteriaWeight">Weight (%)</label>
                <input type="number" class="form-control" id="criteriaWeight" name="criteriaWeight" min="0" max="100" required style="border-radius: 4px;" />
            </div>
            <br />
            <button type="submit" class="btn ms-2" style="border-radius: 4px; background-color: #850000; color: #fff;">Add Criteria</button>
        </form>
    </div>
</div>
<hr />
<div class="d-flex justify-content-between align-items-start mt-4">
    <div class="flex-fill">
        <h5 class="mx-3"><b>MANAGE EXISTING CRITERIA</b></h5>
        @foreach (var criteria in Model.Item3)
        {
            <div class="criteria">
                <label class="mx-3"><b>[@criteria.Id] @criteria.Name (Weight: @criteria.Weight%)</b></label>
                <a href="@Url.Action("RemoveCriteria", "Chief", new {id = criteria.Id})" class="btn btn-sm btn-danger"
                   onclick="return confirm('Are you sure you want to remove this criteria?');">Remove</a>

                <h6>Sub-Categories: </h6>
                <ul>
                    @foreach (var subcategory in Model.Item4.Where(s => s.CriteriaId == criteria.Id))
                    {
                        <li>
                            [@subcategory.Id] @subcategory.Name (Max Score: @subcategory.MaxScore)
                            <a href="@Url.Action("RemoveSubCategory", "Chief", new {id = subcategory.Id})" class="btn btn-sm btn-danger"
                               onclick="return confirm('Are you sure you want to remove this sub-category?');">Remove</a>
                        </li>
                    }
                </ul>
                <label class="mx-3"><b>ADD SUBCATEGORY</b></label>
                <form method="post" action="@Url.Action("AddSubCategory", "Chief")">
                    <input type="hidden" name="criteriaId" value="@criteria.Id" />
                    <div class="form-group" style="width: 500px;">
                        <label for="subcategoryName">Subcategory Name</label>
                        <input type="text" class="form-control" id="subcategoryName" name="subcategoryName" required style="border-radius: 4px;" />
                    </div>
                    <div class="form-group" style="width: 500px;">
                        <label for="subcategoryMaxScore">Max Score</label>
                        <input type="number" class="form-control" id="subcategoryMaxScore" name="subcategoryMaxScore" min="1" max="10" required style="border-radius: 4px;" />
                    </div>
                    <br />
                    <button type="submit" class="btn ms-2" style="border-radius: 4px; background-color: #850000; color: #fff;">Add Subcategory</button>
                </form>
            </div>
            <hr />
        }
    </div>
</div>

<script>
    function updateSwitchStatus(element, switchType) {
        var statusText = document.getElementById(`${switchType}-status`);
        var slider = document.getElementById(`${switchType}-slider`);
        if (element.checked) {
            statusText.textContent = "ON";
            statusText.style.color = "#fff";
            element.parentElement.querySelector(".slider").style.backgroundColor = "#4CAF50"; // Green
        } else {
            statusText.textContent = "OFF";
            statusText.style.color = "#fff";
            element.parentElement.querySelector(".slider").style.backgroundColor = "#f44336"; // Red
        }
    }

    function updateEvaluatorCount(){
        const count = document.getElementById('evaluatorCount').value;

        if (count < 1 || count > 10) {
            alert('Please enter a Number of Evaluator between 1 and 10');
            return;
        }

        if (confirm('Are you sure you want to change the Number of Evaluators in University Funded Research?')) {
            $.ajax({
                url: '@Url.Action("UpdateEvaluatorNum", "Chief")',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                data: {
                    count: count
                },
                success: function (response) {
                    alert('Number of evaluators updated successfully');
                },
                error: function (xhr, status, error) {
                    alert('Error updating number of evaluators. Please try again.');
                }
            });
        } else {
            count = @Model.Item1.evaluatorNum;
        }
    }

    function updateDaysEvaluation(){
        const days = document.getElementById('evaluationDays').value;

        if (days < 1 || days > 30) {
            alert('Please enter a Number of Days between 1 and 30');
            return;
        }

        if (confirm('Are you sure you want to change the Number of Days of Evaluation in University Funded Research?')) {
            $.ajax({
                url: '@Url.Action("UpdateEvaluationDays", "Chief")',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                data: {
                    days: days
                },
                success: function (response) {
                    alert('Number of days updated successfully');
                },
                error: function (xhr, status, error) {
                    alert('Error updating number of days. Please try again.');
                }
            });
        } else {
            count = @Model.Item1.daysEvaluation;
        }
    }

    function previewFile(fileInputId){
        const fileInput = document.getElementById(fileInputId);
        if (fileInput.files.length === 0) {
            alert('Please select a file to preview.');
            return;
        }

        const file = fileInput.files[0];
        const fileURL = URL.createObjectURL(file);
        const fileExtension = file.name.split('.').pop().toLowerCase();

        if (fileExtension === 'pdf') {
            // If it's a PDF, open in a new tab for preview
            window.open(fileURL, '_blank');
        } else {
            // For other file types, prompt download
            const link = document.createElement('a');
            link.href = fileURL;
            link.download = file.name;
            link.click();
        }
    }

    function submitFile(fileInputId, documentType) {
        const token = $('input[name="__RequestVerificationToken"]').val();
        const fileInput = document.getElementById(fileInputId);
        const file = fileInput.files[0];

        if (!file) {
            alert('Please select a file.');
            return;
        }

        const formData = new FormData();
        formData.append('file', file);
        formData.append('documentType', documentType);

        if (confirm('Are you sure you want to add the file?')) {
            $.ajax({
                url: '@Url.Action("UploadGuidelines", "Chief")',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                data: formData,
                contentType: false,
                processData: false,
                success: function (response) {
                    // Clear the file input
                    fileInput.value = '';
                    window.location.href = '/Chief/Settings';
                },
                error: function (xhr, status, error) {
                    alert('Error uploading file. Please try again.');
                }
            });
        }
        else {
            return;
        }
    }
</script>

<script>
    const maintenanceSwitch = document.getElementById('maintenanceSwitch');
    const maintenanceStatus = document.getElementById('maintenance-status');
    const maintenanceSlider = document.getElementById('maintenance-slider');

    const ufrAppSwitch = document.getElementById('ufrAppSwitch');
    const ufrAppStatus = document.getElementById('ufrApp-status');
    const ufrAppSlider = document.getElementById('ufrApp-slider');

    const efrAppSwitch = document.getElementById('efrAppSwitch');
    const efrAppStatus = document.getElementById('efrApp-status');
    const efrAppSlider = document.getElementById('efrApp-slider');

    const ufrlAppSwitch = document.getElementById('ufrlAppSwitch');
    const ufrlAppStatus = document.getElementById('ufrlApp-status');
    const ufrlAppSlider = document.getElementById('ufrlApp-slider');

    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

    maintenanceSwitch.addEventListener('change', async function (event) {
        event.preventDefault();

        const newState = this.checked;
        const currentState = !newState;
        const checkbox = this;
        const message = newState ?
            'Are you sure you want to put in Maintenance Mode the system?' :
            'Are you sure you want to turn off the Maintenance Mode in the system?';

        if (confirm(message)) {
            $.ajax({
                url: '@Url.Action("UpdateMaintenanceMode", "Chief")',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                data: {
                    isMaintenanceMode: newState
                },
                success: function (response) {
                    checkbox.checked = newState
                    maintenanceStatus.textContent = newState ? 'ON' : 'OFF';
                },
                error: function (xhr, status, error) {
                    alert('Error updating status. Please try again.');
                }
            });
        } else {
            checkbox.checked = currentState;
            updateSwitchStatus(checkbox, 'maintenance');
        }
    });

    ufrAppSwitch.addEventListener('change', async function (event) {
        event.preventDefault();

        const newState = this.checked;
        const currentState = !newState;
        const checkbox = this;
        const message = newState ?
            'Are you sure you want to open the application for University Funded Research?' :
            'Are you sure you want to close the application for University Funded Research?';

        if (confirm(message)) {
            $.ajax({
                url: '@Url.Action("UpdateUFRMode", "Chief")',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                data: {
                    isUFRMode: newState
                },
                success: function (response) {
                    checkbox.checked = newState
                    ufrAppStatus.textContent = newState ? 'ON' : 'OFF';
                },
                error: function (xhr, status, error) {
                    alert('Error updating status. Please try again.');
                }
            });
        } else {
            checkbox.checked = currentState;
            updateSwitchStatus(checkbox, 'ufrApp');
        }
    });

    efrAppSwitch.addEventListener('change', async function (event) {
        event.preventDefault();

        const newState = this.checked;
        const currentState = !newState;
        const checkbox = this;
        const message = newState ?
            'Are you sure you want to open the application for Externally Funded Research?' :
            'Are you sure you want to close the application for Externally Funded Research?';

        if (confirm(message)) {
            $.ajax({
                url: '@Url.Action("UpdateEFRMode", "Chief")',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                data: {
                    isEFRMode: newState
                },
                success: function (response) {
                    checkbox.checked = newState
                    efrAppStatus.textContent = newState ? 'ON' : 'OFF';
                },
                error: function (xhr, status, error) {
                    alert('Error updating status. Please try again.');
                }
            });
        } else {
            checkbox.checked = currentState;
            updateSwitchStatus(checkbox, 'efrApp');
        }
    });

    ufrlAppSwitch.addEventListener('change', async function (event) {
        event.preventDefault();

        const newState = this.checked;
        const currentState = !newState;
        const checkbox = this;
        const message = newState ?
            'Are you sure you want to open the application for University Funded Research Load?' :
            'Are you sure you want to close the application for University Funded Research Load?';

        if (confirm(message)) {
            $.ajax({
                url: '@Url.Action("UpdateUFRLMode", "Chief")',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                data: {
                    isUFRLMode: newState
                },
                success: function (response) {
                    checkbox.checked = newState
                    ufrlAppStatus.textContent = newState ? 'ON' : 'OFF';
                },
                error: function (xhr, status, error) {
                    alert('Error updating status. Please try again.');
                }
            });
        } else {
            checkbox.checked = currentState;
            updateSwitchStatus(checkbox, 'ufrlApp');
        }
    });

    window.addEventListener('load', function () {
        const initialState = @Json.Serialize(Model.Item1.isMaintenance);
        maintenanceSwitch.checked = initialState;
        maintenanceStatus.textContent = initialState ? 'ON' : 'OFF';
        maintenanceStatus.style.color = initialState ? '#fff' : '#fff';
        maintenanceSlider.style.backgroundColor = initialState ? '#4CAF50' : '#f44336';

        const ufrInitialState = @Json.Serialize(Model.Item1.isUFRApplication);
        ufrAppSwitch.checked = ufrInitialState;
        ufrAppStatus.textContent = ufrInitialState ? 'ON' : 'OFF';
        ufrAppStatus.style.color = ufrInitialState ? '#fff' : '#fff';
        ufrAppSlider.style.backgroundColor = ufrInitialState ? '#4CAF50' : '#f44336';

        const efrInitialState = @Json.Serialize(Model.Item1.isEFRApplication);
        efrAppSwitch.checked = efrInitialState;
        efrAppStatus.textContent = efrInitialState ? 'ON' : 'OFF';
        efrAppStatus.style.color = efrInitialState ? '#fff' : '#fff';
        efrAppSlider.style.backgroundColor = efrInitialState ? '#4CAF50' : '#f44336';

        const ufrlInitialState = @Json.Serialize(Model.Item1.isUFRLApplication);
        ufrlAppSwitch.checked = ufrlInitialState;
        ufrlAppStatus.textContent = ufrlInitialState ? 'ON' : 'OFF';
        ufrlAppStatus.style.color = ufrlInitialState ? '#fff' : '#fff';
        ufrlAppSlider.style.backgroundColor = ufrlInitialState ? '#4CAF50' : '#f44336';

        const initialEvaluatorCount = @Json.Serialize(Model.Item1.evaluatorNum);
        document.getElementById('evaluatorCount').value = initialEvaluatorCount;

        const initialEvaluationDays = @Json.Serialize(Model.Item1.daysEvaluation);
        document.getElementById('evaluationDays').value = initialEvaluationDays;
    });
</script>


<style>
    .form-group {
        margin-top: 20px;
    }

    .app-switch {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 0 20px;
    }

        .app-switch h5 {
            margin-bottom: 10px;
            color: #333;
            font-weight: 600;
        }

    .switch {
        position: relative;
        display: inline-block;
        width: 120px;
        height: 34px;
        margin-right: 20px;
    }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 34px;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

    .slider-text {
        position: absolute;
        font-size: 14px;
        font-weight: bold;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        transition: .4s;
    }

    input:checked + .slider:before {
        transform: translateX(86px);
    }

    .input-group input[type="number"] {
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        border: 1px solid #ced4da;
    }

        .input-group input[type="number"]:focus {
            border-color: #80bdff;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
        }

    .input-group .btn-primary {
        background-color: #850000;
        border-color: #850000;
    }

        .input-group .btn-primary:hover {
            background-color: #6a0000;
            border-color: #6a0000;
        }

    .input-group input[type="file"] {
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        border: 1px solid #ced4da;
    }

    .input-group .btn-info {
        background-color: #17a2b8;
        border-color: #17a2b8;
    }

    ul {
        list-style-type: none;
        padding-left: 0;
    }

    li {
        margin-bottom: 10px;
    }

        li a {
            font-size: 14px;
            font-weight: bold;
        }

    .text-info {
        color: #17a2b8;
    }

    .text-danger {
        color: #dc3545;
    }
</style>