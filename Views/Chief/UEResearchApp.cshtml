@model Tuple<List<FundedResearchApplication>, List<Evaluation>, List<Evaluator>>
@{
    ViewData["Title"] = "University Funded Research Applications";
    Layout = "_NavChief1";
}
<div class="funded-research-container">
    <h2 class="title">UNIVERSITY FUNDED RESEARCH APPLICATIONS</h2>

    <div class="research-categories">
        <div class="research-category university-funded">
            <a asp-action="UFResearchApp"><h3>University Funded Research</h3></a>
        </div>
        <div class="research-category externally-funded">
            <a asp-action="EFResearchApp"><h3>Externally Funded Research</h3></a>
        </div>
        <div class="research-category research-load">
            <a asp-action="UFRLApp"><h3>University Funded Research Load</h3></a>
        </div>
    </div>
    <hr />

    <div class="search-section">
        <!-- Search Form -->
        <form asp-controller="Chief" asp-action="UFResearchApp" method="get" class="form-inline mb-3">
            <input type="text" name="searchString" class="search-box" placeholder="Search by Research Title" value="@ViewData["currentFilter"]" />
            <button type="submit" class="search-btn"><i class="bi bi-search"></i></button>
        </form>
    </div>

    <table class="document-table">
        <thead>
            <tr>
                <th>DTS No.</th>
                <th>Application Details</th>
                <th>Assign Evaluators</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var app in Model.Item1)
            {
                <tr>
                    <td>
                        @(app.dts_No != null ? app.dts_No : "-")
                    </td>
                    <td class="research-details">
                        <b>Research Title:</b> @app.research_Title<br />
                        <b>Field of Study:</b> @app.field_of_Study
                    </td>
                    <td>
                        @{
                            //Filter the evaluations list by the current application ID (fra_Id)
                            var assignedEvaluators = Model.Item2.Where(e => e.fra_Id == app.fra_Id &&
                            e.evaluation_Status == "Pending").ToList();
                        }
                        @if (assignedEvaluators.Count > 0)
                        {
                            foreach (var eval in assignedEvaluators)
                            {
                                <button class="assign wevaluator"
                                        data-evaluation-id="@eval.evaluation_Id">
                                    @eval.evaluator_Name
                                </button>
                            }
                        }
                        else
                        {
                            <span class="assign noevaluator">No Evaluator yet</span>
                        }
                    </td>
                    <td>
                        <button class="manageevaluator-btn"><i class="bi bi-people-fill"></i></button>
                        <a asp-action="UnderMaintenance" asp-controller="Home" asp-route-id="@app.fra_Id" class="edit-btn">
                            <i class="bi bi-pencil-square"></i>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


<!--modal evaluator-->
<div class="evaluators-modal" style="display:none;">
    <div class="header">
        <h1>LIST OF EVALUATORS</h1>
        <button class="close-btn">&times;</button>
    </div>

    <div class="evaluator-list">
        @foreach (var eval in Model.Item3)
        {
            @foreach (var app in Model.Item1)
            {
                bool isApplicant = eval.evaluator_Name == app.applicant_Name;
                bool isTeamMember = app.team_Members.Contains(eval.evaluator_Name);

                var assignedEvaluators = Model.Item2.Where(e => e.fra_Id == app.fra_Id).ToList();

                int pendingCount = Model.Item2.Count(e => e.evaluator_Name == eval.evaluator_Name &&
                e.evaluation_Status == "Pending");

                int assignedCount = assignedEvaluators.Count;

                bool isAlrAssigned = assignedEvaluators.Any(e => e.evaluator_Name == eval.evaluator_Name);

                <div class="evaluator-item">
                    <i class="bi bi-person-circle" style="color: #000; font-size: 50px; margin-left: 10px;"></i>
                    <div class="evaluator-details">
                        <h5 class="evaluator-name"><b>@eval.evaluator_Name</b></h5>
                        <p>Fields of Interest: @string.Join("; ", eval.field_of_Interest)</p>
                        <p>Pending: @pendingCount</p>
                    </div>
                    @if (isApplicant || isTeamMember || isAlrAssigned || assignedCount >= 5)
                    {
                        <button class="primary-btn" disabled>CANNOT BE ASSIGNED</button>
                    }
                    else
                    {
                        <button class="assign-btn"
                                data-evaluator-id="@eval.evaluator_Id"
                                data-fra-id="@app.fra_Id">
                            ASSIGN
                        </button>
                    }
                </div>
            }
        }
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    document.querySelectorAll('.manageevaluator-btn').forEach(button => {
        button.addEventListener('click', function () {
            document.querySelector('.evaluators-modal').style.display = 'block';
        });
    });

    document.querySelector('.close-btn').addEventListener('click', function () {
        document.querySelector('.evaluators-modal').style.display = 'none';
    });

    $(document).ready(function () {
        $(document).on('click', '.assign-btn', function () {
            var evaluatorId = $(this).data('evaluator-id');
            var fraId = $(this).data('fra-id');

            // Show confirmation dialog
            var confirmAssign = confirm("Are you sure you want to assign this evaluator?");

            if (confirmAssign) {
                // User clicked "Yes", proceed with assignment
                $.ajax({
                    url: '@Url.Action("AssignEvaluator", "Chief")', // Update with your actual controller name
                    type: 'POST',
                    data: {
                        evaluatorId: evaluatorId,
                        fraId: fraId
                    },
                    success: function (response) {
                        if (response.success) {
                            alert('Evaluator assigned successfully!');
                            location.reload(); // Reload to update the list and counts
                        } else {
                            alert('Failed to assign evaluator. ' + response.message);
                        }
                    },
                    error: function (error) {
                        console.log(error);
                        alert('An error occurred.');
                    }
                });
            } else {
                alert("Assignment canceled.");
            }
        });
    });

    $(document).ready(function () {
        $(document).on('click', '.assign', function () {
            var evaluationId = $(this).data('evaluation-id');

            var confirmAssign = confirm("Are you sure you want to remove this evaluator?");
            if (confirmAssign) {
                $.ajax({
                    url: '@Url.Action("DeclineEvaluator", "Chief")', // Update with your actual controller name
                    type: 'POST',
                    data: {
                        evaluationId: evaluationId
                    },
                    success: function (response) {
                        if (response.success) {
                            alert('Evaluator removed successfully!');
                            location.reload(); // Reload to update the list and counts
                        } else {
                            alert('Failed to remove evaluator. ' + response.message);
                        }
                    },
                    error: function (error) {
                        console.log(error);
                        alert('An error occurred.');
                    }
                });
            } else {
                alert('Removed canceled');
            }
        });
    });
</script>