@model Tuple<List<FundedResearchApplication>, List<Evaluation>, List<Evaluator>>
@{
    ViewData["Title"] = "University Funded Research Applications";
    Layout = "_NavChief1";
}
<div class="funded-research-container">
    <h2 class="title">UNIVERSITY FUNDED RESEARCH APPLICATIONS</h2>
    <hr />

    <div class="search-section">
        <!-- Search Form -->
        <form asp-controller="Chief" asp-action="UFResearchApp" method="get" class="form-inline mb-3">
            <input type="text" name="searchString" class="search-box" placeholder="Search by Research Title" value="@ViewData["currentFilter"]" />
            <button type="submit" class="search-btn"><i class="bi bi-search"></i></button>
        </form>
    </div>

    <table class="document-table">
        <thead>
            <tr>
                <th>DTS No.</th>
                <th>Application Details</th>
                <th>Assign Evaluators</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var app in Model.Item1)
            {
                <tr>
                    <td>
                        @(app.dts_No != null ? app.dts_No : "-")
                    </td>
                    <td class="research-details">
                        <b>Research Title:</b> @app.research_Title<br />
                        <b>Field of Study:</b> @app.field_of_Study
                    </td>
                    <td>
                        @{
                            //Filter the evaluations list by the current application ID (fra_Id)
                            var assignedEvaluators = Model.Item2.Where(e => e.fra_Id == app.fra_Id &&
                            e.evaluation_Status == "Pending").ToList();
                                                    @foreach (var eval in Model.Item3.DistinctBy(e => e.evaluator_Id))
                            {
                                bool isApplicant = Model.Item1.Any(app => eval.evaluator_Name == app.applicant_Name);
                            }
                        }
                        @if (assignedEvaluators.Count > 0)
                        {
                            foreach (var eval in assignedEvaluators)
                            {
                                <button class="assign wevaluator"
                                        data-evaluation-id="@eval.evaluation_Id">
                                    @eval.evaluator_Name
                                </button>
                            }
                        }
                        else
                        {
                            <span class="assign noevaluator">No Evaluator yet</span>
                        }
                    </td>
                    <td>
                        <button class="manageevaluator-btn"
                            data-fra-id="@app.fra_Id"
                            data-field-of-study="@app.field_of_Study"><i class="bi bi-people-fill"></i></button>
                        <a asp-action="UnderMaintenance" asp-controller="Home" asp-route-id="@app.fra_Id" class="edit-btn">
                            <i class="bi bi-pencil-square"></i>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


<!--modal evaluator-->
<div class="evaluators-modal" style="display:none;">
    <div class="header">
        <h1>LIST OF EVALUATORS</h1>
        <button class="close-btn">&times;</button>
    </div>

    <div class="evaluator-list">
        
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        // Handle the click event for 'Manage Evaluator' buttons
        $('.manageevaluator-btn').click(function () {
            var fraId = $(this).data('fra-id');
            var fieldOfStudy = $(this).data('field-of-study');
            
            $.ajax({
                url: '@Url.Action("GetEvaluatorsForResearch", "Chief")',
                type: 'GET',
                data: { fraId: fraId, fieldOfStudy: fieldOfStudy },
                success: function (data) {
                    $('.evaluator-list').empty(); // Clear the current list

                    $.each(data, function (i, evaluator) {
                        // Create a new evaluator item
                        var evaluatorItem = $('<div>').addClass('evaluator-item')
                            .css({
                                'display': 'flex',
                                'align-items': 'center',
                                'justify-content': 'space-between',
                                'background-color': 'white',
                                'border-radius': '5px',
                                'padding': '1px',
                                'margin': '10px 0',
                                'border': '1px solid #7C0000'
                            });

                        var icon = $('<i>').addClass('bi bi-person-circle')
                            .css({
                                'color': '#000',
                                'font-size': '50px',
                                'margin-left': '10px'
                            });

                        var details = $('<div>').addClass('evaluator-details')
                            .css({
                                'flex-grow': '1',
                                'padding-left': '20px',
                                'color': 'black',
                                'line-height': '0.25',
                                'font-size': '12px'
                            });

                        var name = $('<h5>').addClass('evaluator-name')
                            .html('<b>' + evaluator.evaluator_Name + '</b>');

                        var fieldsOfInterest = $('<p>').text('Fields of Interest: ' + evaluator.field_of_Interest.join(', ')); // Assuming it's an array

                        var pendingCount = $('<p>').text('Pending: ' + evaluator.pendingCount);

                        details.append(name, fieldsOfInterest, pendingCount);

                        var button = $('<button>')
                            .addClass('assign-btn')
                            .css({
                                'background-color': '#FFDB89',
                                'border': 'none',
                                'padding': '10px',
                                'font-weight': 'bold',
                                'cursor': 'pointer',
                                'border-radius': '5px',
                                'color': '#850000',
                                'margin-right': '20px'
                            })
                            .text('ASSIGN')
                            .data('evaluator-id', evaluator.evaluator_Id)
                            .data('fra-id', fraId);

                        var button2 = $('<p>')
                            .text('CANNOT BE ASSIGNED');

                        // Append icon, details, and button to the evaluator item
                        if (evaluator.isDisabled) {
                            evaluatorItem.append(icon, details, button2);
                        } else {
                            evaluatorItem.append(icon, details, button);
                        }
                        

                        // Add the evaluator item to the list
                        $('.evaluator-list').append(evaluatorItem);
                    });

                    $('.evaluators-modal').show(); // Show the modal with updated content
                }

            });
        });

        // Close the modal when the close button is clicked
        $('.close-btn').click(function () {
            $('.evaluators-modal').hide();
        });

        // Handle the assignment of evaluators
        $(document).on('click', '.assign-btn', function () {
            var evaluatorId = $(this).data('evaluator-id');
            var fraId = $(this).data('fra-id');

            // Show confirmation dialog
            var confirmAssign = confirm("Are you sure you want to assign this evaluator?");

            if (confirmAssign) {
                // Proceed with assignment
                $.ajax({
                    url: '@Url.Action("AssignEvaluator", "Chief")',
                    type: 'POST',
                    data: {
                        evaluatorId: evaluatorId,
                        fraId: fraId
                    },
                    success: function (response) {
                        if (response.success) {
                            alert('Evaluator assigned successfully!');
                            location.reload(); // Reload to update the list and counts
                        } else {
                            alert('Failed to assign evaluator. ' + response.message);
                        }
                    },
                    error: function (error) {
                        console.log(error);
                        alert('An error occurred.');
                    }
                });
            }
        });
    });

    $(document).ready(function () {
        $(document).on('click', '.assign', function () {
            var evaluationId = $(this).data('evaluation-id');

            var confirmAssign = confirm("Are you sure you want to remove this evaluator?");
            if (confirmAssign) {
                $.ajax({
                    url: '@Url.Action("DeclineEvaluator", "Chief")', // Update with your actual controller name
                    type: 'POST',
                    data: {
                        evaluationId: evaluationId
                    },
                    success: function (response) {
                        if (response.success) {
                            alert('Evaluator removed successfully!');
                            location.reload(); // Reload to update the list and counts
                        } else {
                            alert('Failed to remove evaluator. ' + response.message);
                        }
                    },
                    error: function (error) {
                        console.log(error);
                        alert('An error occurred.');
                    }
                });
            } else {
                alert('Removed canceled');
            }
        });
    });
</script>